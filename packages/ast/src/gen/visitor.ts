// !!! THIS FILE WAS AUTO-GENERATED BY `npm run gen` !!!
import { Path } from "../path";
import { Context } from "../path-visitor";
import type * as types from "./types";
export interface Visitor<M = Record<string, any>> {
  reset?(this: Context<M>, path: Path, state: M): any;
  visitNode?(this: Context<M>, path: Path<types.Node>, state: M): any;
  visitStmt?(this: Context<M>, path: Path<types.Stmt>, state: M): any;
  visitHelper?(this: Context<M>, path: Path<types.Helper>, state: M): any;
  visitExpr?(this: Context<M>, path: Path<types.Expr>, state: M): any;
  visitOrphan?(this: Context<M>, path: Path<types.Orphan>, state: M): any;
  visitTemplate?(this: Context<M>, path: Path<types.Template>, state: M): any;
  visitOutput?(this: Context<M>, path: Path<types.Output>, state: M): any;
  visitExtends?(this: Context<M>, path: Path<types.Extends>, state: M): any;
  visitLoop?(this: Context<M>, path: Path<types.Loop>, state: M): any;
  visitFor?(this: Context<M>, path: Path<types.For>, state: M): any;
  visitAsyncEach?(this: Context<M>, path: Path<types.AsyncEach>, state: M): any;
  visitAsyncAll?(this: Context<M>, path: Path<types.AsyncAll>, state: M): any;
  visitIf?(this: Context<M>, path: Path<types.If>, state: M): any;
  visitName?(this: Context<M>, path: Path<types.Name>, state: M): any;
  visitMacro?(this: Context<M>, path: Path<types.Macro>, state: M): any;
  visitKeyword?(this: Context<M>, path: Path<types.Keyword>, state: M): any;
  visitCall?(this: Context<M>, path: Path<types.Call>, state: M): any;
  visitCallBlock?(this: Context<M>, path: Path<types.CallBlock>, state: M): any;
  visitPair?(this: Context<M>, path: Path<types.Pair>, state: M): any;
  visitFilter?(this: Context<M>, path: Path<types.Filter>, state: M): any;
  visitTest?(this: Context<M>, path: Path<types.Test>, state: M): any;
  visitFilterBlock?(
    this: Context<M>,
    path: Path<types.FilterBlock>,
    state: M
  ): any;
  visitWith?(this: Context<M>, path: Path<types.With>, state: M): any;
  visitBlock?(this: Context<M>, path: Path<types.Block>, state: M): any;
  visitInclude?(this: Context<M>, path: Path<types.Include>, state: M): any;
  visitImport?(this: Context<M>, path: Path<types.Import>, state: M): any;
  visitFromImport?(
    this: Context<M>,
    path: Path<types.FromImport>,
    state: M
  ): any;
  visitExprStmt?(this: Context<M>, path: Path<types.ExprStmt>, state: M): any;
  visitAssign?(this: Context<M>, path: Path<types.Assign>, state: M): any;
  visitAssignBlock?(
    this: Context<M>,
    path: Path<types.AssignBlock>,
    state: M
  ): any;
  visitBinExpr?(this: Context<M>, path: Path<types.BinExpr>, state: M): any;
  visitUnaryExpr?(this: Context<M>, path: Path<types.UnaryExpr>, state: M): any;
  visitNSRef?(this: Context<M>, path: Path<types.NSRef>, state: M): any;
  visitLiteral?(this: Context<M>, path: Path<types.Literal>, state: M): any;
  visitConst?(this: Context<M>, path: Path<types.Const>, state: M): any;
  visitTemplateData?(
    this: Context<M>,
    path: Path<types.TemplateData>,
    state: M
  ): any;
  visitTuple?(this: Context<M>, path: Path<types.Tuple>, state: M): any;
  visitList?(this: Context<M>, path: Path<types.List>, state: M): any;
  visitDict?(this: Context<M>, path: Path<types.Dict>, state: M): any;
  visitCondExpr?(this: Context<M>, path: Path<types.CondExpr>, state: M): any;
  visitGetitem?(this: Context<M>, path: Path<types.Getitem>, state: M): any;
  visitGetattr?(this: Context<M>, path: Path<types.Getattr>, state: M): any;
  visitSlice?(this: Context<M>, path: Path<types.Slice>, state: M): any;
  visitConcat?(this: Context<M>, path: Path<types.Concat>, state: M): any;
  visitCompare?(this: Context<M>, path: Path<types.Compare>, state: M): any;
  visitOperand?(this: Context<M>, path: Path<types.Operand>, state: M): any;
  visitMul?(this: Context<M>, path: Path<types.Mul>, state: M): any;
  visitDiv?(this: Context<M>, path: Path<types.Div>, state: M): any;
  visitFloorDiv?(this: Context<M>, path: Path<types.FloorDiv>, state: M): any;
  visitAdd?(this: Context<M>, path: Path<types.Add>, state: M): any;
  visitSub?(this: Context<M>, path: Path<types.Sub>, state: M): any;
  visitMod?(this: Context<M>, path: Path<types.Mod>, state: M): any;
  visitPow?(this: Context<M>, path: Path<types.Pow>, state: M): any;
  visitAnd?(this: Context<M>, path: Path<types.And>, state: M): any;
  visitOr?(this: Context<M>, path: Path<types.Or>, state: M): any;
  visitNot?(this: Context<M>, path: Path<types.Not>, state: M): any;
  visitNeg?(this: Context<M>, path: Path<types.Neg>, state: M): any;
  visitPos?(this: Context<M>, path: Path<types.Pos>, state: M): any;
  visitEnvironmentAttribute?(
    this: Context<M>,
    path: Path<types.EnvironmentAttribute>,
    state: M
  ): any;
  visitExtensionAttribute?(
    this: Context<M>,
    path: Path<types.ExtensionAttribute>,
    state: M
  ): any;
  visitImportedName?(
    this: Context<M>,
    path: Path<types.ImportedName>,
    state: M
  ): any;
  visitInternalName?(
    this: Context<M>,
    path: Path<types.InternalName>,
    state: M
  ): any;
  visitMarkSafe?(this: Context<M>, path: Path<types.MarkSafe>, state: M): any;
  visitMarkSafeIfAutoescape?(
    this: Context<M>,
    path: Path<types.MarkSafeIfAutoescape>,
    state: M
  ): any;
  visitContextReference?(
    this: Context<M>,
    path: Path<types.ContextReference>,
    state: M
  ): any;
  visitDerivedContextReference?(
    this: Context<M>,
    path: Path<types.DerivedContextReference>,
    state: M
  ): any;
  visitContinue?(this: Context<M>, path: Path<types.Continue>, state: M): any;
  visitBreak?(this: Context<M>, path: Path<types.Break>, state: M): any;
  visitScope?(this: Context<M>, path: Path<types.Scope>, state: M): any;
  visitOverlayScope?(
    this: Context<M>,
    path: Path<types.OverlayScope>,
    state: M
  ): any;
  visitEvalContextModifier?(
    this: Context<M>,
    path: Path<types.EvalContextModifier>,
    state: M
  ): any;
  visitScopedEvalContextModifier?(
    this: Context<M>,
    path: Path<types.ScopedEvalContextModifier>,
    state: M
  ): any;
}
