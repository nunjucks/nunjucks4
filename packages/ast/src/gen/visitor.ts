// !!! THIS FILE WAS AUTO-GENERATED BY `npm run gen` !!!
import { Path } from "../path";
import { Context } from "../path-visitor";
import type * as t from "./types";
export interface Visitor<M = Record<string, any>> {
  reset?(this: Context<M>, path: Path, state: M): any;
  visitPosition?(this: Context<M>, path: Path<t.Position>, state: M): any;
  visitSourceLocation?(
    this: Context<M>,
    path: Path<t.SourceLocation>,
    state: M
  ): any;
  visitPrintable?(this: Context<M>, path: Path<t.Printable>, state: M): any;
  visitNode?(this: Context<M>, path: Path<t.Node>, state: M): any;
  visitBaseNode?(this: Context<M>, path: Path<t.BaseNode>, state: M): any;
  visitStmt?(this: Context<M>, path: Path<t.Stmt>, state: M): any;
  visitHelper?(this: Context<M>, path: Path<t.Helper>, state: M): any;
  visitExpr?(this: Context<M>, path: Path<t.Expr>, state: M): any;
  visitTemplate?(this: Context<M>, path: Path<t.Template>, state: M): any;
  visitOutput?(this: Context<M>, path: Path<t.Output>, state: M): any;
  visitExtends?(this: Context<M>, path: Path<t.Extends>, state: M): any;
  visitFor?(this: Context<M>, path: Path<t.For>, state: M): any;
  visitIf?(this: Context<M>, path: Path<t.If>, state: M): any;
  visitName?(this: Context<M>, path: Path<t.Name>, state: M): any;
  visitMacro?(this: Context<M>, path: Path<t.Macro>, state: M): any;
  visitKeyword?(this: Context<M>, path: Path<t.Keyword>, state: M): any;
  visitCall?(this: Context<M>, path: Path<t.Call>, state: M): any;
  visitCallBlock?(this: Context<M>, path: Path<t.CallBlock>, state: M): any;
  visitPair?(this: Context<M>, path: Path<t.Pair>, state: M): any;
  visitFilterTestBase?(
    this: Context<M>,
    path: Path<t.FilterTestBase>,
    state: M
  ): any;
  visitFilter?(this: Context<M>, path: Path<t.Filter>, state: M): any;
  visitTest?(this: Context<M>, path: Path<t.Test>, state: M): any;
  visitFilterBlock?(this: Context<M>, path: Path<t.FilterBlock>, state: M): any;
  visitWith?(this: Context<M>, path: Path<t.With>, state: M): any;
  visitBlock?(this: Context<M>, path: Path<t.Block>, state: M): any;
  visitInclude?(this: Context<M>, path: Path<t.Include>, state: M): any;
  visitFromImport?(this: Context<M>, path: Path<t.FromImport>, state: M): any;
  visitExprStmt?(this: Context<M>, path: Path<t.ExprStmt>, state: M): any;
  visitAssign?(this: Context<M>, path: Path<t.Assign>, state: M): any;
  visitAssignBlock?(this: Context<M>, path: Path<t.AssignBlock>, state: M): any;
  visitBinExpr?(this: Context<M>, path: Path<t.BinExpr>, state: M): any;
  visitBinExprBase?(this: Context<M>, path: Path<t.BinExprBase>, state: M): any;
  visitUnaryExpr?(this: Context<M>, path: Path<t.UnaryExpr>, state: M): any;
  visitUnaryExprBase?(
    this: Context<M>,
    path: Path<t.UnaryExprBase>,
    state: M
  ): any;
  visitNSRef?(this: Context<M>, path: Path<t.NSRef>, state: M): any;
  visitLiteral?(this: Context<M>, path: Path<t.Literal>, state: M): any;
  visitConst?(this: Context<M>, path: Path<t.Const>, state: M): any;
  visitTemplateData?(
    this: Context<M>,
    path: Path<t.TemplateData>,
    state: M
  ): any;
  visitTuple?(this: Context<M>, path: Path<t.Tuple>, state: M): any;
  visitList?(this: Context<M>, path: Path<t.List>, state: M): any;
  visitDict?(this: Context<M>, path: Path<t.Dict>, state: M): any;
  visitCondExpr?(this: Context<M>, path: Path<t.CondExpr>, state: M): any;
  visitGetitem?(this: Context<M>, path: Path<t.Getitem>, state: M): any;
  visitGetattr?(this: Context<M>, path: Path<t.Getattr>, state: M): any;
  visitSlice?(this: Context<M>, path: Path<t.Slice>, state: M): any;
  visitConcat?(this: Context<M>, path: Path<t.Concat>, state: M): any;
  visitCompare?(this: Context<M>, path: Path<t.Compare>, state: M): any;
  visitOperand?(this: Context<M>, path: Path<t.Operand>, state: M): any;
  visitMul?(this: Context<M>, path: Path<t.Mul>, state: M): any;
  visitDiv?(this: Context<M>, path: Path<t.Div>, state: M): any;
  visitFloorDiv?(this: Context<M>, path: Path<t.FloorDiv>, state: M): any;
  visitAdd?(this: Context<M>, path: Path<t.Add>, state: M): any;
  visitSub?(this: Context<M>, path: Path<t.Sub>, state: M): any;
  visitMod?(this: Context<M>, path: Path<t.Mod>, state: M): any;
  visitPow?(this: Context<M>, path: Path<t.Pow>, state: M): any;
  visitAnd?(this: Context<M>, path: Path<t.And>, state: M): any;
  visitOr?(this: Context<M>, path: Path<t.Or>, state: M): any;
  visitNot?(this: Context<M>, path: Path<t.Not>, state: M): any;
  visitNeg?(this: Context<M>, path: Path<t.Neg>, state: M): any;
  visitPos?(this: Context<M>, path: Path<t.Pos>, state: M): any;
  visitEnvironmentAttribute?(
    this: Context<M>,
    path: Path<t.EnvironmentAttribute>,
    state: M
  ): any;
  visitExtensionAttribute?(
    this: Context<M>,
    path: Path<t.ExtensionAttribute>,
    state: M
  ): any;
  visitImportedName?(
    this: Context<M>,
    path: Path<t.ImportedName>,
    state: M
  ): any;
  visitInternalName?(
    this: Context<M>,
    path: Path<t.InternalName>,
    state: M
  ): any;
  visitMarkSafe?(this: Context<M>, path: Path<t.MarkSafe>, state: M): any;
  visitMarkSafeIfAutoescape?(
    this: Context<M>,
    path: Path<t.MarkSafeIfAutoescape>,
    state: M
  ): any;
  visitContextReference?(
    this: Context<M>,
    path: Path<t.ContextReference>,
    state: M
  ): any;
  visitDerivedContextReference?(
    this: Context<M>,
    path: Path<t.DerivedContextReference>,
    state: M
  ): any;
  visitContinue?(this: Context<M>, path: Path<t.Continue>, state: M): any;
  visitBreak?(this: Context<M>, path: Path<t.Break>, state: M): any;
  visitScope?(this: Context<M>, path: Path<t.Scope>, state: M): any;
  visitOverlayScope?(
    this: Context<M>,
    path: Path<t.OverlayScope>,
    state: M
  ): any;
  visitEvalContextModifier?(
    this: Context<M>,
    path: Path<t.EvalContextModifier>,
    state: M
  ): any;
  visitScopedEvalContextModifier?(
    this: Context<M>,
    path: Path<t.ScopedEvalContextModifier>,
    state: M
  ): any;
}
